# https://github.com/nyurik/auto_pr_comments_from_forks
name: Update PR comments

on:
  # This number should correspond to the IGNORE_RUNS_OLDER_THAN value below.
  # When setting up for the first time, use "on: push" instead of "on: schedule"
  # and set IGNORE_RUNS_OLDER_THAN to a very high number until it runs once.
  push:
    branches:
    - master
  schedule:
    - cron: '*/5 * * * *'

jobs:
  pr_updater:
    runs-on: ubuntu-latest

    steps:
      # - name: Wait for artifact to be created
      #   uses: jakejarvis/wait-action@master
      #   with:
      #     time: '20s'
      - name: Fetch artifact
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          WORKFLOW_NAME: "Mark"
          # the name of the artifact whose content comment published by PR. Must have a single markdown file inside.
          MSG_ARTIFACT_NAME: "message"
          # How far back to look for finished runs, in minutes.
          # Set to 10-20 minutes higher than cron's job frequency set above.
          IGNORE_RUNS_OLDER_THAN: 200
          # How far back to look for updated pull requests, in minutes.
          # Should be bigger than IGNORE_RUNS_OLDER_THAN by the maximum time a pull request jobs may take
          IGNORE_PRS_OLDER_THAN: 200
        run: |
          #
          # Strategy:
          #  * get all recently updated pull requests
          #  * get all recent workflow runs
          #  * match pull requests and their current SHA with the last workflow run for the same SHA
          #  * for each found match of  <pull-request-number>  and  <workflow-run-id> :
          #     * download artifact from the workflow run -- expects a single file with markdown content
          #     * use artifact as trigger if available
          export GITHUB_API="https://api.github.com/repos/$GITHUB_REPOSITORY"
          export COMMENT_MAGIC_HEADER='<!--'" Do not edit. This comment will be auto-updated with artifact '$MSG_ARTIFACT_NAME' created by action '$WORKFLOW_NAME' -->"
          # A useful wrapper around CURL
          crl() {
            curl --silent --show-error --location --retry 1 "${@:2}" \
              -H "Accept: application/vnd.github.antiope-preview+json, application/vnd.github.v3+json" \
             "$1"
          }
          auth_crl() {
            crl "$1" -H "authorization: Bearer $GITHUB_TOKEN" "${@:2}"
          }
          #
          # Parse current pull requests
          #
          # Get all pull requests, most recently updated first
          # (this way we don't need to page through all of them)
          # Filter out PRs that are older than $IGNORE_PRS_OLDER_THAN minutes
          # Result is an object, mapping a "key" to the pull request number:
          # {
          #   "nyurik/openmaptiles/nyurik-patch-1/4953dd2370b9988a7832d090b5e47b3cd867f594": 6,
          #   ...
          # }
          PULL_REQUESTS_RAW="$( crl "$GITHUB_API/pulls?state=all&sort=updated&direction=desc" )"
          if ! PULL_REQUESTS="$(jq --arg IGNORE_PRS_OLDER_THAN "$IGNORE_PRS_OLDER_THAN" '
              map(
                  # Only select unlocked pull requests updated within last $IGNORE_PRS_OLDER_THAN minutes
                  select((now - (.updated_at|fromdate)) / 60 < ($IGNORE_PRS_OLDER_THAN | tonumber))
                  # Prepare for "from_entries" by creating a key/value object
                  # The key is a combination of repository name, branch name, and latest SHA
                  | { key: (.head.repo.full_name + "/" + .head.ref + "/" + .head.sha), value: .number }
              )
              | from_entries
            ' <( echo "$PULL_REQUESTS_RAW" ) )"; then
              echo "Error parsing pull requests"
              echo "$PULL_REQUESTS_RAW"
              exit 1
          fi
          # Count how many pull requests we should process, and exit early if there are none
          PR_COUNT="$(jq 'length' <( echo "$PULL_REQUESTS" ) )"
          if [ "$PR_COUNT" -eq 0 ]; then
            echo "There are no pull requests updated in the last $IGNORE_PRS_OLDER_THAN minutes. Exiting."
            exit
          else
            echo "$PR_COUNT pull requests have been updated in the last $IGNORE_PRS_OLDER_THAN minutes"
            echo "$PULL_REQUESTS" | jq -r 'keys|.[]|" * " + .'
          fi
          #
          # Resolve workflow name into workflow ID
          #
          WORKFLOW_ID="$(crl "$GITHUB_API/actions/workflows" \
              | jq --arg WORKFLOW_NAME "$WORKFLOW_NAME" '
              .workflows[] | select(.name == $WORKFLOW_NAME) | .id
              ')"
          if [ -z "$WORKFLOW_ID" ]; then
            echo "Unable to find workflow '$WORKFLOW_NAME' in $GITHUB_REPOSITORY"
            exit 1
          else
            echo "Resolved workflow '$WORKFLOW_NAME' to ID $WORKFLOW_ID"
          fi
          #
          # Match pull requests with the workflow runs
          #
          # Get all workflow runs that were triggered by pull requests
          WORKFLOW_PR_RUNS="$(crl "$GITHUB_API/actions/workflows/${WORKFLOW_ID}/runs?event=pull_request")"
          # For each workflow run, match it with the pull request to get the PR number
          # A match is based on "source repository + branch + SHA" key
          # In rare cases (e.g. force push to an older revision), there could be more than one match
          # for a given PR number, so just use the most recent one.
          # Result is a table (list of lists) - each row with PR number, JOB ID, and the above key
          PR_JOB_MAP="$(jq --arg IGNORE_RUNS_OLDER_THAN "$IGNORE_RUNS_OLDER_THAN" '
              # second input is the pull request map - use it to lookup PR numbers
              input as $PULL_REQUESTS
              | .workflow_runs
              | map(
                  # Create a new object with the relevant values
                  {
                      id,
                      updated_at,
                      # create lookup key based on source repository + branch + SHA
                      key: (.head_repository.full_name + "/" + .head_branch + "/" + .head_sha),
                      # was this a successful run?
                      # do not include  .conclusion=="success"  because errors could also post messages
                      success: (.status=="completed")
                  }
                  # lookup PR number from $PULL_REQUESTS using the above key
                  | . += { pr_number: $PULL_REQUESTS[.key] }
                  # Remove runs that were not in the list of the PRs
                  | select(.pr_number)
              )
              # Keep just the most recent run per pull request
              | group_by(.pr_number)
              | map(
                  sort_by(.updated_at)
                  | last
                  # If the most recent run did not succeed, or if the run is too old, ignore it
                  | select(.success and (now - (.updated_at|fromdate)) / 60 < ($IGNORE_RUNS_OLDER_THAN | tonumber))
                  # Keep just the pull request number mapping to run ID
                  | { pr_number, id, key }
              )
              ' <( echo "$WORKFLOW_PR_RUNS" ) <( echo "$PULL_REQUESTS" ) )"
          # Count how many jobs we should process, and exit early if there are none
          JOBS_COUNT="$(jq 'length' <( echo "$PR_JOB_MAP" ) )"
          if [ "$JOBS_COUNT" -eq 0 ]; then
            echo "There are no recent workflow job runs in the last $IGNORE_RUNS_OLDER_THAN minutes. Exiting."
            exit
          else
            echo "$JOBS_COUNT '$WORKFLOW_NAME' jobs have been updated in the last $IGNORE_RUNS_OLDER_THAN minutes"
            echo "$PR_JOB_MAP" | jq -r '.[] | " * PR #\(.pr_number) Job #\(.id) -- \(.key) "'
          fi
          #
          # Iterate over the found pairs of PR number + run ID, and update them all
          #
          echo "$PR_JOB_MAP" | jq -r '.[] | [ .pr_number, .id, .key ] | @sh' | \
          while read -r PR_NUMBER RUN_ID RUN_KEY; do
            echo "Processing '$WORKFLOW_NAME' run #$RUN_ID for pull request #$PR_NUMBER $RUN_KEY..."
            ARTIFACTS="$(crl "$GITHUB_API/actions/runs/$RUN_ID/artifacts")"
            # Find the artifact download URL for the artifact with the expected name
            ART_ID="$(jq -r --arg MSG_ARTIFACT_NAME "$MSG_ARTIFACT_NAME" '
                .artifacts
                | map(select(.name == $MSG_ARTIFACT_NAME and .expired == false))
                | first
                | .id
                | select(.!=null)
                ' <( echo "$ARTIFACTS" ) )"            
            ARTIFACT_URL="$(jq -r --arg MSG_ARTIFACT_NAME "$MSG_ARTIFACT_NAME" '
                .artifacts
                | map(select(.name == $MSG_ARTIFACT_NAME and .expired == false))
                | first
                | .archive_download_url
                | select(.!=null)
                ' <( echo "$ARTIFACTS" ) )"
            if [ -z "$ARTIFACT_URL" ]; then
              echo "Unable to find an artifact named '$MSG_ARTIFACT_NAME' in workflow $RUN_ID (PR #$PR_NUMBER), skipping..."
              continue
            fi
            echo "Downloading artifact $ARTIFACT_URL (assuming single text file per artifact)..."
            if ! MESSAGE="$(auth_crl "$ARTIFACT_URL" | gunzip)"; then
              echo "Unable to download or parse message from artifact '$MSG_ARTIFACT_NAME' in workflow $RUN_ID (PR #$PR_NUMBER), skipping..."
              continue
            fi
            if [ -z "$MESSAGE" ]; then
              echo "Empty message in artifact '$MSG_ARTIFACT_NAME' in workflow $RUN_ID (PR #$PR_NUMBER), skipping..."
              continue
            fi
            
            echo "::set-env name=JS::$(echo ${MESSAGE})" 
            echo "::set-env name=PR_TITLE::$(echo ${MESSAGE} | jq -r .PR_TITLE)" 
            echo "::set-env name=PR_NUMBER::$(echo ${MESSAGE} | jq -r .PR_NUMBER)" 

            # For trigger removing
            echo "::set-env name=ART_ID::$(echo ${ART_ID})" 
            echo "::set-env name=GITHUB_API::$(echo ${GITHUB_API})" 
            echo "ARTID", $ART_ID

          done
      - name: Fetch triggers and set env
        run: |
          export GITHUB_API="https://api.github.com/repos/$GITHUB_REPOSITORY"
          export PR_NUMBER=$(echo $JS | jq -r .PR_NUMBER)
          LABEL_STAGED=$(curl -f "$GITHUB_API/issues/$PR_NUMBER/labels" \
                -H "Content-Type: application/json" | jq '.[] | select(.name=="GHA/STAGED")' | jq -r '.name' )
          LABEL_RELEASED=$(curl -f "$GITHUB_API/issues/$PR_NUMBER/labels" \
                -H "Content-Type: application/json" | jq '.[] | select(.name=="GHA/RELEASED")' | jq -r '.name' )
          MERGED_FLAG=$(curl -f "$GITHUB_API/pulls/$PR_NUMBER" \
                   -H "Content-Type: application/json" | jq '.merged')

          if [ -z "$LABEL_RELEASED" ]; then
            # If not labeled released, add bools to run workflow
            if [ -z "$LABEL_STAGED" ]; then
              echo "Release will be staged"
              echo "::set-env name=STAGE::true"
            else
              echo "Release has already been staged"
            fi

            if [ "$MERGED_FLAG" == true ]; then
              echo "PR has been merged"
              echo "::set-env name=MERGED::true"
            else
              echo "PR has not been merged"
            fi
          fi

          echo "STAGE", $STAGE
          echo "MERGED", $MERGED
          echo "::set-env name=RELEASED::${LABEL_RELEASED}"
          echo "RELEASED", $RELEASED

          echo "LABEL_RELEASED", $LABEL_RELEASED
          echo "LABEL_STAGED", $LABEL_STAGED


      - name: Dump env 
        env:
          GHA_ENV: ${{ toJson(env) }}
        run: |
          echo "$GHA__ENV"

      - name: Checkout repository
        if: env.ART_ID  # Trigger artifact exists
        uses: actions/checkout@v1.2.0
      - name: Set up git user
        if: env.ART_ID  # Trigger artifact exists
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      - name: Checkout master
        if: env.ART_ID  # Trigger artifact exists
        run: git checkout master
      - name: Squash and merge PR#${{ env.PR_NUMBER }} to master
        if: env.STAGE && env.ART_ID  # Trigger artifact exists
        run: |
          PR_TITLE=$(echo $JS | jq -r .PR_TITLE)
          PR_NUMBER=$(echo $JS | jq -r .PR_NUMBER)
          git fetch origin "pull/${PR_NUMBER}/head:PR${PR_NUMBER}"
          git merge --squash "PR${PR_NUMBER}"
          git commit -m "${PR_TITLE} (#${PR_NUMBER})"
      - name: Set up Python 3.7
        if: env.ART_ID  # Trigger artifact exists
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install bumpversion
        if: env.ART_ID  # Trigger artifact exists
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install bumpversion
      - name: Run bumpversion ${{ env.BV_PART }}
        if: env.ART_ID  # Trigger artifact exists
        run: |
          PR_NUMBER=$(echo $JS | jq -r .PR_NUMBER)
          BV_PART=$(echo $JS | jq -r .BV_PART)
          OLD_TAG=$(git describe --tags --abbrev=0)
          echo "::set-env name=OLD_TAG::${OLD_TAG}"
          echo "Run bumpversion"
          echo "bumpversion $BV_PART --message Bump version: {current_version} → {new_version}"
          bumpversion $BV_PART --message "Bump version: {current_version} → {new_version}
          Triggered by #${PR_NUMBER} via GitHub Actions."
          echo "Successfully ran bumpversion"
          NEW_TAG=$(git describe --tags --abbrev=0)
          echo "::set-env name=NEW_TAG::${NEW_TAG}"
          git tag -n99 -l $NEW_TAG
          echo "Old Tag:" $OLD_TAG
          echo "New Tag:" $NEW_TAG
          CHANGES=$(git log --pretty=format:'%s' $OLD_TAG..HEAD -i -E --grep='^([a-z]*?):')
          echo "CHANGES:"$CHANGES";"
          if [ -z "${CHANGES// }" ]; then echo "CHANGES is empty, will substitute a dummy"; fi
          if [ -z "${CHANGES// }" ]; then CHANGES="dummy: didn't find valid semantic labels"; fi
          CHANGES_NEWLINE="$(echo "${CHANGES}" | sed -e 's/^/  - /')"
          SANITIZED_CHANGES=$(echo "${CHANGES}" | sed -e 's/^/<li>/' -e 's|$|</li>|' -e 's/(#[0-9]\+)//' )
          echo "::set-env name=CHANGES::${SANITIZED_CHANGES//$'\n'/}"
          echo -n "$CHANGES" | grep -c '^'
          NUM_CHANGES=$(echo -n "$CHANGES" | grep -c '^')
          echo "::set-env name=NUM_CHANGES::${NUM_CHANGES}"
          git tag $NEW_TAG $NEW_TAG^{} -f -m "$(printf "This is a $BV_PART release from $OLD_TAG → $NEW_TAG.\n\nChanges:\n$CHANGES_NEWLINE")"
          git tag -n99 -l $NEW_TAG
      - name: Comment on issue
        if: env.STAGE && env.ART_ID  # Trigger artifact exists
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          export GITHUB_API="https://api.github.com/repos/$GITHUB_REPOSITORY"
          export PR_NUMBER=$(echo $JS | jq -r .PR_NUMBER)
          crl() {
            curl --silent --show-error --location --retry 1 "${@:2}" \
              -H "Accept: application/vnd.github.antiope-preview+json, application/vnd.github.v3+json" \
             "$1"
          }
          auth_crl() {
            crl "$1" -H "authorization: Bearer $GITHUB_TOKEN" "${@:2}"
          }
          
          export MSG="""I've queued this up. When it gets merged, I'll create a ${{ env['BV_PART'] }} release from ${{ env['OLD_TAG'] }} → ${{ env['NEW_TAG'] }} which includes the following ${{ env['NUM_CHANGES'] }} change(s) [including this PR]:<br />${{ env['CHANGES'] }}<br />If you make any more changes, you probably want to re-trigger me again by removing the `bumpversion/${{ env['BV_PART'] }}` label and then adding it back again."""
          
          # Pipe MSG to file and send comment
          jq -n --arg msg "${MSG}" \
            '{ body: $msg }' > git-tmp.txt
          COMMENT_HTML_URL="$(auth_crl "$GITHUB_API/issues/$PR_NUMBER/comments" \
                  -X POST \
                  -H "Content-Type: application/json" \
                  -d @git-tmp.txt \
                | jq -r '.html_url' )"

          ADD_LABEL="$(auth_crl "$GITHUB_API/issues/$PR_NUMBER/labels" \
                  -X POST \
                  -H "Content-Type: application/json" \
                  -d '["GHA/STAGED"]')"

      - name: Push changes
        if: env.MERGED
        uses: ad-m/github-push-action@v0.5.0
        with:
          branch: master
          github_token: ${{ secrets.PAT_TEST }}

      - name: Mark as released and clean up
        if: env.MERGED
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          crl() {
            curl --silent --show-error --location --retry 1 "${@:2}" \
              -H "Accept: application/vnd.github.antiope-preview+json, application/vnd.github.v3+json" \
             "$1"
          }
          auth_crl() {
            crl "$1" -H "authorization: Bearer $GITHUB_TOKEN" "${@:2}"
          }

          echo "Removing triggering artifact id: $ART_ID"
          DEL_ART="$(auth_crl "$GITHUB_API/actions/artifacts/$ART_ID" \
                -X DELETE \
                -H "Content-Type: application/json" )" 

          echo "Update labels"
          ADD_RELEASED="$(auth_crl "$GITHUB_API/issues/$PR_NUMBER/labels" \
                          -X POST \
                          -H "Content-Type: application/json" \
                          -d '["GHA/RELEASED"]')"

          DEL_STAGED="$(auth_crl "$GITHUB_API/issues/$PR_NUMBER/labels/GHA/STAGED" \
                        -X DELETE \
                        -H "Content-Type: application/json" )"

      # - name: Comment that something failed
      #   if: failure()
      #   uses: actions/github-script@0.3.0
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const issue = { owner: context.issue.owner, repo: context.issue.repo, issue_number: context.issue.number }
      #       github.issues.createComment({...issue, body: ":cry: Something went wrong. I am not able to push. Check the [Actions pipeline](https://github.com/${{ github.repository }}/actions?query=workflow%3A%22Tag+Creator%22) to see what happened. If you make any more changes, you probably want to re-trigger me again by adding the `bumpversion/${{ env['BV_PART'] }}` label again."})
      #       github.issues.removeLabel({...context.issue, "bumpversion/${{ env['BV_PART'] }}" })